AWSTemplateFormatVersion: 2010-09-09

Description: Solution to keep an RDS DB instance stopped

Parameters:
  pEnvironmentName:
    Default: DEV
    Description: Name of the environment, for resource naming
    Type: String
  pRdsDbInstanceId:
    Description: ID of the DB instance to keep stopped
    Type: String
  pRdsDbInstanceArn:
    Description: ARN of the DB instance to keep stopped
    Type: String
  pPollingRate:
    Description: Rate at which to invoke the DB instance stopping function e.g. 2 hours, 1 day, etc.
    Type: String
    Default: 3 hours
  pSecurityGroupIds:
    Description: Comma-separated list of security groups IDs for the Lambda function (should allow it to connect to the DB instance)
    Type: List<AWS::EC2::SecurityGroup::Id>
  pPrivateSubnetIds:
    Description: Comma-separated list of subnet IDs for the Lambda function (should be the same VPC private subnet as the DB instance)
    Type: List<AWS::EC2::Subnet::Id>

Resources:
  # Lambda function that checks the status of an RDS DB instance, and stops it if it's not already stopped
  rStopRdsDbInstanceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${pEnvironmentName}-Stop-RDS-DB-Instance-Function
      Runtime: nodejs18.x
      Role: !GetAtt rStopRdsDbInstanceRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          const { RDSClient, DescribeDBInstancesCommand, StopDBInstanceCommand } = require('@aws-sdk/client-rds');

          const rdsClient = new RDSClient();

          const instanceInput = {
            DBInstanceIdentifier: process.env.DB_INSTANCE_ID,
          }

          exports.handler = async function(event) {
            const describeInstancesCommand = new DescribeDBInstancesCommand(instanceInput);
            const describeInstancesResponse = await rdsClient.send(describeInstancesCommand);
            
            if (describeInstancesResponse.DBInstances[0].DBInstanceStatus == 'stopped') {
              console.log('Instance is already stopped, leaving it alone');
            }
            else {
              console.log('Instance is not stopped, stopping');
              const stopInstanceCommand = new StopDBInstanceCommand(instanceInput);
              await rdsClient.send(stopInstanceCommand);
            }
            
            return 'All done';
          };
      Timeout: 30
      Environment:
        Variables:
          DB_INSTANCE_ID: !Ref pRdsDbInstanceId
      VpcConfig:
        SecurityGroupIds: !Ref pSecurityGroupIds
        SubnetIds: !Ref pPrivateSubnetIds

  # Lambda function role
  rStopRdsDbInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${pEnvironmentName}-Stop-RDS-DB-Instance-Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: DescribeAndStopRdsDbInstance
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - rds:DescribeDBInstances
                  - rds:StopDBInstance
                Effect: Allow
                Resource: !Ref pRdsDbInstanceArn

  # Event rule to trigger the Lambda function to stop the RDS DB instance
  rStopRdsDbInstanceEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Trigger Lambda to check RDS DB instance status, and stop it if it's running
      ScheduleExpression: !Sub rate(${pPollingRate})
      Targets:
        - Arn: !GetAtt rStopRdsDbInstanceFunction.Arn
          Id: StopRdsDbInstanceLambda

  # Permission for the event rule to invoke the Lambda function
  rFunctionInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref rStopRdsDbInstanceFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt rStopRdsDbInstanceEventRule.Arn
